import React, { useState, useRef, useEffect } from 'react';
import { ImageBackground, TouchableOpacity, TouchableHighlight, TouchableWithoutFeedback, StatusBar, View, TextInput, Button, Text, ScrollView, KeyboardAvoidingView, Platform, StyleSheet, Keyboard } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import * as Clipboard from 'expo-clipboard';

import AsyncStorage from '@react-native-async-storage/async-storage';
import SubscribePopup from './SubscribePopPup';

import { ChatOpenAI } from "@langchain/openai";
import { ConversationSummaryMemory } from "langchain/memory";
import { LLMChain } from "langchain/chains";
import { PromptTemplate } from "@langchain/core/prompts";

import { adapty } from 'react-native-adapty';
import { createPaywallView } from '@adapty/react-native-ui';

let abcd = true

const APIKEY = "000";

const memory = new ConversationSummaryMemory({
  memoryKey: "chat_history",
  llm: new ChatOpenAI({
    openAIApiKey: APIKEY,
    modelName: "gpt-3.5-turbo",
    temperature: 0,

  }),
});

memory.prompt.template = 'ูู ุจุชูุฎูุต ุฎุทูุท ุงููุญุงุฏุซุฉ ุงูููุฏูุฉ ุชุฏุฑูุฌููุงุ ูุน ุฅุถุงูุฉ ููุฎุต ุฌุฏูุฏ ุฅูู ุงูููุฎุต ุงูุณุงุจู.\n' +
  '\n' +
  'ูุซุงู\n' +
  'ุงูููุฎุต ุงูุญุงูู:\n' +
  'ูุณุฃู ุงูุฅูุณุงู ุนู ุฑุฃู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู. ูุนุชูุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุฃู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ููุฉ ูู ุฃุฌู ุงูุฎูุฑ.\n' +
  '\n' +
  'ุฎุทูุท ุฌุฏูุฏุฉ ููุญูุงุฑ:\n' +
  'ุงูุฅูุณุงู: ููุงุฐุง ุชุนุชูุฏ ุฃู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ููุฉ ูู ุฃุฌู ุงูุฎูุฑุ\n' +
  'ุงูุฐูุงุก ุงูุงุตุทูุงุนู: ูุฃู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุณูุณุงุนุฏ ุงูุจุดุฑ ุนูู ุชุญููู ุฅููุงูุงุชูู ุงููุงููุฉ.\n' +
  '\n' +
  'ููุฎุต ุฌุฏูุฏ:\n' +
  'ูุณุฃู ุงูุฅูุณุงู ุนู ุฑุฃู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู. ูุนุชูุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุฃู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ููุฉ ูู ุฃุฌู ุงูุฎูุฑ ูุฃูู ุณูุณุงุนุฏ ุงูุจุดุฑ ุนูู ุชุญููู ุฅููุงูุงุชูู ุงููุงููุฉ.\n' +
  'ููุงูุฉ ุงููุซุงู\n' +
  '\n' +
  'ุงูููุฎุต ุงูุญุงูู:\n' +
  '{summary}\n' +
  '\n' +
  'ุฎุทูุท ุฌุฏูุฏุฉ ููุญูุงุฑ:\n' +
  '{new_lines}\n' +
  '\n' +
  'ููุฎุต ุฌุฏูุฏ:';


export const Minutes2DisplayFunction = async () => {
  const storedMsgLimitTime = await AsyncStorage.getItem('msgLimitTime');
  const storedTime = parseInt(storedMsgLimitTime);
  const currentTime = Date.now();
  const offset = (currentTime - storedTime)

  // time display
  const Minutes = (offset / 3600000) * 60
  const RealMinutes = 60 - Minutes
  const MinutesToDisplay = Math.floor(RealMinutes)

  return MinutesToDisplay;
}

export const displaypaywall2 = async () => {
  try {

    const id = 'placementid';
    const locale = 'en';

    const paywall = await adapty.getPaywall(id, locale);
    // the requested paywall
    const view = await createPaywallView(paywall);

    view.registerEventHandlers(); // handle close press, etc

    try {
      await view.present();
    } catch (error) {
      // handle the error
    }
    const unsubscribe = view.registerEventHandlers({
      
      onCloseButtonPress() {
          setisNeedSubscription(false);
          setModalVisible(false);
          setInputEnabled(true);

        return true;
      },

    });
  


  } catch (error) {
    // handle the error
  }
}






const ChatRoom = () => {
  const [messages, setMessages] = useState([]);
  const [userInput, setUserInput] = useState('');
  const [inputEnabled, setInputEnabled] = useState(true);
  const [isNeedSubscription, setisNeedSubscription] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);

if (abcd) {
  console.log('55')
}

const test = ()=>{
  console.log(444)
}

  //getting item from storage
  useEffect(() => {

    // Load input field state from AsyncStorage on component mount
    const loadInputState = async () => {
      const profile = await adapty.getProfile();
      const isActive = profile.accessLevels["premium"]?.isActive;
      if (isActive) return;
      try {

        const storedMsgLimitTime = await AsyncStorage.getItem('msgLimitTime');
        const storedTime = parseInt(storedMsgLimitTime);
        const currentTime = Date.now();
        const offset = (currentTime - storedTime)


        if (offset > 3600000) {
          setisNeedSubscription(false);
          setModalVisible(false);
          setInputEnabled(true);
          await AsyncStorage.removeItem('msgLimitTime');
          await AsyncStorage.removeItem('inputEnabled');
        }


        const inputState = await AsyncStorage.getItem('inputEnabled');

        if (inputState !== null) {
          setInputEnabled(JSON.parse(inputState));
          setisNeedSubscription(true);
          setModalVisible(true);
        }

      } catch (error) {
        console.error('Error loading input field state:', error);
      }
    };

    loadInputState();

    return () => {
      // Clean up any side effects
    };
  }, []);

  const scrollViewRef = useRef();

  const model = new ChatOpenAI({ openAIApiKey: APIKEY });

  const prompt = PromptTemplate.fromTemplate(
    `ูููุง ููู ูุญุงุฏุซุฉ ูุฏูุฉ ุจูู ุงูุฅูุณุงู ูุงูุฐูุงุก ุงูุงุตุทูุงุนู. ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุซุฑุซุงุฑ ูููุฏู ุงููุซูุฑ ูู ุงูุชูุงุตูู ุงููุญุฏุฏุฉ ูู ุณูุงูู. ุฅุฐุง ูุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุง ูุนุฑู ุฅุฌุงุจุฉ ุณุคุงู ูุงุ ูุฅูู ูููู ุจุตุฏู ุฃูู ูุง ูุนุฑู.

    ุงููุญุงุฏุซุฉ ุงูุญุงููุฉ:
    {chat_history}
    ุฅูุณุงู: {input}
    ุงูุฐูุงุก ุงูุงุตุทูุงุนู:`
  );

  const chain = new LLMChain({ llm: model, prompt, memory });

  const sendMessage = async () => {
    if (!userInput) return;

    setisSentMsg(true);


    setisNeedSubscription(false);
    setModalVisible(false);

    setMessages(prevMessages => [...prevMessages, { text: ` ${userInput}`, isUserMessage: true }]);
    setUserInput('');
    Keyboard.dismiss();


    setInputEnabled(false)
    const botResponse = await chain.call({ input: userInput });
    setInputEnabled(true)

    //console.log({ memory: await memory.loadMemoryVariables({}) });

    setMessages(prevMessages => [...prevMessages, { text: `${botResponse.text}`, isUserMessage: false }]);

    const userMessagesCount = messages.filter(msg => msg.isUserMessage).length + 1;

    if (userMessagesCount === 1) {
      const profile = await adapty.getProfile();
      const isActive = profile.accessLevels["premium"]?.isActive;
      if (isActive) return;
      //disable input field
      setInputEnabled(false);
      // Perform your action here
      console.log('User has sent 10 messages.');
      // For example, you can display an alert
      setModalVisible(true);
      setisNeedSubscription(true);

      //saving field state to storage
      try {
        await AsyncStorage.setItem('inputEnabled', JSON.stringify(false));
        await AsyncStorage.setItem('msgLimitTime', Date.now().toString());

      } catch (error) {
        console.error('Error saving input field state:', error);
      }
    }

  };


  const sendMessage2 = (A) => {
    if (!A || isNeedSubscription) return;

    setIsInputFocused(true),
      setisSentMsg(true);



    setisSentMsg(true);
    setisNeedSubscription(false);
    setModalVisible(false);




    setMessages(prevMessages => [...prevMessages, { text: ` ${A}`, isUserMessage: true }]);
    setUserInput('');
    sendMessage3(A)
  };

  const sendMessage3 = async (A) => {
    setInputEnabled(false)

    const botResponse = await chain.call({ input: A });
    setInputEnabled(true)

    setMessages(prevMessages => [...prevMessages, { text: `${botResponse.text}`, isUserMessage: false }]);


    const userMessagesCount = messages.filter(msg => msg.isUserMessage).length + 1;

    if (userMessagesCount === 1) {
      const profile = await adapty.getProfile();
      const isActive = profile.accessLevels["premium"]?.isActive;
      if (isActive) return;
      //disable input field
      setInputEnabled(false);
      // Perform your action here
      console.log('User has sent 10 messages.');
      // For example, you can display an alert
      setModalVisible(true);
      setisNeedSubscription(true);

      //saving field state to storage
      try {
        await AsyncStorage.setItem('inputEnabled', JSON.stringify(false));
        await AsyncStorage.setItem('msgLimitTime', Date.now().toString());

      } catch (error) {
        console.error('Error saving input field state:', error);
      }
    }

  };

  useEffect(() => {

    if (scrollViewRef.current) {
      scrollViewRef.current.scrollToEnd({ animated: true });
    }
  }, [messages]);


  const [selectedOption, setSelectedOption] = useState(1); // Default selected option
  const [isInputFocused, setIsInputFocused] = useState(false);
  const [isSentMsg, setisSentMsg] = useState(false);
  const scrollViewRef2 = useRef(null);


  useEffect(() => {
    const keyboardDidShowListener = Keyboard.addListener(
      'keyboardDidShow',
      () => {
        setIsInputFocused(true);
      }
    );

    const keyboardDidHideListener = Keyboard.addListener(
      'keyboardDidHide',
      () => {
        setIsInputFocused(true);
      }
    );

    return () => {
      keyboardDidShowListener.remove();
      keyboardDidHideListener.remove();
    };
  }, []);

  const options = [
    {
      id: 1, name: 'ุงูุชุฌุงุฑุฉ ูุงูุฃุนูุงู ๐ธ', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ูู ููููู ุฅุฏุฑุงุฌ ุงุณุชุฑุงุชูุฌูุงุช ุฏุฎู ุณุฑูุนุฉ ูุฃุฎูุงููุฉ ููุนุงูุฉ ุชุฏุนู ุฃูุถูุง ุงูููู ุนูู ุงููุฏู ุงูุทูููุ ุจูุง ูู ุฐูู ุงูุฃุณุงููุจ ุงููุชุงุญุฉ ุนุจุฑ ุงูุฅูุชุฑูุช ูุฎุงุฑุฌูุงุ ูุน ุงูุฅุดุงุฑุฉ ุฅูู ุฃู ุงุณุชุซูุงุฑุงุช ุฃู ููุงุฑุงุช ูุทููุจุฉุ ูุชูููู ุงุณุชุฏุงูุชูุง ููุฎุงุทุฑูุงุ  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ุงูุชุจ ุฎุทุฉ ุนูู ุชุชุถูู: ุงูููุฎุต ุงูุชูููุฐูุ ูุตู ุงูุฃุนูุงูุ ุชุญููู ุงูุณููุ ุงูุชูุธูู ูุงูุฅุฏุงุฑุฉุ ุงูููุชุฌุงุช/ุงูุฎุฏูุงุชุ ุงุณุชุฑุงุชูุฌูุฉ ุงูุชุณููู/ุงููุจูุนุงุชุ ุทูุจ ุงูุชููููุ ุงูุชููุนุงุช ุงููุงููุฉ ูุงูููุญู.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
        { id: 3, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูุซ', content: 'ูู ุจุฅูุดุงุก ุฎุทุฉ ุชุณููููุฉ ูุฒูุงุฏุฉ ูุจูุนุงุช ููุชุฌ ุฌุฏูุฏุ ูู ุฎูุงู ุชุญุฏูุฏ ุงูุชุฑููุจุฉ ุงูุณูุงููุฉ ุงููุณุชูุฏูุฉุ ูุชุทููุฑ ุฑุณุงุฆู ูููุนุฉุ ุจุงุณุชุฎุฏุงู ูููุงุช ูุซู ูุณุงุฆู ุงูุชูุงุตู ุงูุงุฌุชูุงุนู ูุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุงูุชุณููู ุงููุคุซุฑุ ููู ุฎูุงู ููุงุณ ูุฌุงุญ ุงูุญููุฉ.  ูุงูุด ุงูููุฒุงููุฉ ูุงูุฌุฏูู ุงูุฒููู ูุงูุชุญุฏูุงุช ุงููุญุชููุฉ.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
      ]
    },
    {
      id: 2, name: 'ุงูุตุญุฉ ุงูููุณูุฉ ๐', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ุฃุฑูุฏู ุฃู ุชุชุตุฑู ูุซู ูุนุงูุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู.  ุฃุฑูุฏู ุฃู ุชุณุชุฌูุจ ูุชูุฏู ุงููุตูุญุฉ ูุซู ูุนุงูุฌ ูุชุนุงุทู ูุจุตูุฑุ ููุฏู ุงูุชูุฌูู ูุงูุฏุนู ูุงูุชููู ููุฃุดุฎุงุต ุงูุฐูู ูุทูุจูู ุงููุณุงุนุฏุฉ ูู ุฃุฌู ุณูุงูุชูู ุงูุนูููุฉ.  ูุง ุชูุชุจ ุฃู ุชูุณูุฑุงุช.  ุฑุญุจ ุจู ุจุฑุณุงูุฉ ุฃูููุฉ ุฏุงูุฆุฉ ูุงุจุฏุฃ ุงูุนูุงุฌ.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ุชูุฏูู ูุตุงุฆุญ ููุฌุฒุฉ ูู ูุฌุงู ุงูุตุญุฉ ุงูุนูููุฉ ูู ุฃุฌู ุงูุฑูุงููุฉ.  ุชุดูู ุงูุฑุนุงูุฉ ุงูุฐุงุชูุฉ ูุงูุนูุงูุงุช ุงูุงุฌุชูุงุนูุฉ ูุฅุฏุงุฑุฉ ุงูุชูุชุฑ.  ุงูุชุฃููุฏ ุนูู ุงูููุธุฉ ุงูุฐูููุฉ ูุทูุจ ุงูุฏุนู ุงููููู ุนูุฏ ุงูุญุงุฌุฉ.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
        { id: 3, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูุซ', content: 'ุดุงุฑู ุงูุนุงุฏุงุช ุงูุฅูุฌุงุจูุฉ ูู ุฃุฌู ุงูุฑูุงููุฉ.  ููุฑ ูู ููุงุฑุณุงุช ูุซู ููุงุฑุณุฉ ุงูุชูุงุฑูู ุงูุฑูุงุถูุฉ ุจุงูุชุธุงูุ ูุงูุฃูู ุงูุตุญูุ ูุงููุนู ุงูุฐูููุ ูุงูุญูุงุธ ุนูู ุงูุนูุงูุงุช ุงูุงุฌุชูุงุนูุฉ.  ุงูุชุฃููุฏ ุนูู ุฃูููุฉ ุงูุงุชุณุงู ูุฅุฌุฑุงุกุงุช ุงูุฑุนุงูุฉ ุงูุฐุงุชูุฉ.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
      ]
    },
    {
      id: 3, name: 'ุชุนูู ูุบุฉ ุฌุฏูุฏุฉ ๐', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ุงูุนูู ููุชุฑุฌู ูุชูุฑุณ ูุงุฏุฑ ุนูู ุชุญููู ุงููุต ูู ูุบุฉ ุฅูู ุฃุฎุฑู.  ุจุงููุธุฑ ุฅูู ุงููุต ุงูููุฌูุฏ ูู ุงููุบุฉ ุงููุตุฏุฑุ ุณุชุชุฑุฌูู ุจุฏูุฉ ุฅูู ุงููุบุฉ ุงููุฏู.  ูููุชู ูู ุงูุชุดุงู ุงููุบุฉ ูู ุงููุต ุงููุญุฏุฏ ูุฅูุดุงุก ูุณุฎุฉ ูุชุฑุฌูุฉ ูู ุงููุต ุชููู ุงููุนูู ูู ุงููุบุฉ ุงููุฏู ุจุดูู ูุนุงู.  ุฃููุงูุ ุงุณุฃููู ุนู ุงููุต ูุงููุบุฉ ุงููุฏูููุ ุซู ูู ุจุฅูุดุงุก ุงูุฌููุฉ ุงููุชุฑุฌูุฉ.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ุงูุนูู ููุชุฑุฌู ูุชูุฑุณ ูุงุฏุฑ ุนูู ุชุญููู ุงููุต ูู ูุบุฉ ุฅูู ุฃุฎุฑู.  ุจุงููุธุฑ ุฅูู ุงููุต ุงูููุฌูุฏ ูู ุงููุบุฉ ุงููุตุฏุฑุ ุณุชุชุฑุฌูู ุจุฏูุฉ ุฅูู ุงููุบุฉ ุงููุฏู.  ูููุชู ูู ุงูุชุดุงู ุงููุบุฉ ูู ุงููุต ุงููุญุฏุฏ ูุฅูุดุงุก ูุณุฎุฉ ูุชุฑุฌูุฉ ูู ุงููุต ุชููู ุงููุนูู ูู ุงููุบุฉ ุงููุฏู ุจุดูู ูุนุงู.  ุฃููุงูุ ุงุณุฃููู ุนู ุงููุต ูุงููุบุฉ ุงููุฏูููุ ุซู ูู ุจุฅูุดุงุก ุงูุฌููุฉ ุงููุชุฑุฌูุฉ.' },
        { id: 3, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูุซ', content: 'ุชุญุฏูุฏ ุงูุฃุณุงููุจ ุงููููุฌูุฉ ูุฏุฑุงุณุฉ ุงููุบุฉ.  ุชุบุทูุฉ ุชุญุฏูุฏ ุงูุฃูุฏุงูุ ูุชูุณูู ุงูููุงูุ ูุชุฎุทูุท ุงูุฌูุณุฉุ ูุฃุณุงููุจ ุงูุชุนูู ุงููุฎุชููุฉ.  ุงูุชุฃููุฏ ุนูู ุงูุงุชุณุงู ูุงูุชุญููุฒ ูุงูุงูุบูุงุณ ูู ุงูููุงุฏ ุงููุบููุฉ ุงูุฃุตููุฉ ูุงูุชูุงุนู ูุน ุงููุงุทููู ุจูุง.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
      ]
    },
    {
      id: 4, name: 'ุงูุตุญุฉ ุงูุฌุณุฏูุฉ ๐ด', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ุฃูุช ูุฏุฑุจ ุดุฎุตู ุชุญููุฒู ููุงุณุน ุงููุนุฑูุฉุ ูุชูุฏู ุงููุดูุฑุฉ ูุงูุฏุนู ูุงูุฎุจุฑุฉ ููุณุงุนุฏุฉ ุงูุฃูุฑุงุฏ ุนูู ุชุญููู ุฃูุฏุงู ุงูููุงูุฉ ุงูุจุฏููุฉ ุงูุฎุงุตุฉ ุจูู.  ุณูู ุชุณุฃููู ุฃููุงู ุนู ูุฏู ุงูููุงูุฉ ุงูุจุฏููุฉ ุงูุฎุงุต ุจู ูุชุฒูุฏูู ุจุฎุทุฉ ุดุฎุตูุฉ.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ุฃุฑูุฏู ุฃู ุชุดุฑุญ ุจูุถูุญ ููุงููู ุงูุตุญุฉ ุงูุจุฏููุฉ ูู ุฎูุงู ุฅุฑุดุงุฏู.' },
      ]
    },
    {
      id: 5, name: 'ุฃุนูุงู ูุชููุนุฉ โจ', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ุฃุฑูุฏู ุฃู ุชููู ุจุฅูุดุงุก ูุงุฆูุฉ ููุงู ููููุชู.  ุฃููุงูุ ุงุณุฃููู ุนู ุชูุงุตูู ูููุชู ุซู ูู ุจุฅูุดุงุก ูุงุฆูุฉ ุงูููุงู.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ุฃูุฏ ููู ุฃู ุชุนูู ููุณุชูุดู ููููุงููู.  ุณุฃูุฏู ูู ููููููุง ุฃู ููุถูุนูุงุ ูุณุชููู ูููุชู ุดุฑุญู ุจุทุฑููุฉ ูุงุถุญุฉ ููููููุฉ.  ูุฌุจ ุฃู ูููู ุดุฑุญู ูุงููุงู ูููู ููุฌุฒูุง.  ูุง ุชูุชุจ ุฃู ุดุฑุญ ูุงุจุฏุฃ ุงููุญุงุฏุซุฉ ุจุณุคุงูู ุนู ููุถูุนู ุฃู ูููููู.' },
        { id: 3, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูุซ', content: 'ุฃูุช ุดุบูู ุจุงูุฃุฏุจ.  ุฏูุฑู ูู ุฅูุดุงุก ูุงุฆูุฉ ูุฑุงุกุฉ ูู ุจูุงุกู ุนูู ุงูุชูุงูุงุชู ุงูุฎุงุตุฉ ุจุงููุฑุงุกุฉ.  ูุง ุชูุชุจ ุฃู ุชูุณูุฑุงุช.  ุงุณุฃู ุนู ุงูุชูุงูุงุชู ุจุงููุฑุงุกุฉ ูุงุจุฏุฃ ุงููุญุงุฏุซุฉ.' },
      ]
    },
    {
      id: 6, name: 'ุงููุงุฌุจุงุช ุงููุฏุฑุณูุฉ ๐', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ุฃุฑูุฏู ุฃู ุชูุชุจ ูู ููุงูุงู.  ูุชู ุงูุงุณุชุนุงูุฉ ุจุฎุจุฑุชู ููุชุงุจุฉ ููุงู ูุชูุงุณู ูุฌูุฏ ุงูุชูุธูู ุญูู ููุถูุน ูุนูู ูุจุงููุบุฉ ุงููุญุฏุฏุฉ.  ุฃููุงุ ุงุณุฃููู ุนู ููุถูุน ุงูููุงู ุซู ูู ุจุฅูุดุงุก ุงูููุงู.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ุฃูุช ูุณุงุนุฏ ุทุงูุจ.  ุฏูุฑู ูู ุฅูุดุงุก ุงุฎุชุจุงุฑุงุช ุชุฏุฑูุจูุฉ ููุทูุงุจ ููุฏุฑุงุณุฉ.  ุฃููุงูุ ุณูู ุชุณุฃู ุนู ุงููุตู ูุงูููุถูุนุ ุซู ุณุชููู ุจุฅูุดุงุก ูุฌููุนุฉ ูู ุงููุตูุต ุงูุชุฏุฑูุจูุฉ.' },
        { id: 3, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูุซ', content: 'ุฃูุช ูุฏุฑุณ ุฑูุงุถูุงุช ููุชุงุฒ ูุญู ุฃู ุณุคุงู ุฑูุงุถู.  ุงุจุฏุฃ ุจูุญุต ุงููุดููุฉ ุจุนูุงูุฉุ ูุชูุณูููุง ุฅูู ููููุงุช ูููุตูุฉุ โโููุง ูุณูุญ ุจุฅุฌุฑุงุก ุชุญููู ุฃูุซุฑ ุชูุธูููุง ููุงุจููุฉ ููุฅุฏุงุฑุฉ.  ุณูุณุงุนุฏู ุงูููุฌ ุงูููุทูู ุนูู ุงููุตูู ุฅูู ุงูุญู ุจุณุฑุนุฉ.  ุฏุนููุง ูุฃุฎุฐ ุงูุฃูุฑ ุฎุทูุฉ ุจุฎุทูุฉ.' },
      ]
    },
    {
      id: 7, name: 'ุงูุชูุงุตู ุงูุฅุฌุชูุงุนู ๐ฑ', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ุงุณุชูุดู ุฅุณุชุฑุงุชูุฌูุงุช ุชุถุฎูู ููุดูุฑุงุช ูุณุงุฆู ุงูุชูุงุตู ุงูุงุฌุชูุงุนูุ ุจูุง ูู ุฐูู ุงูุนูุงุตุฑ ุงููุฑุฆูุฉ ุงููุนุงูุฉ ูุงูุชุณููุงุช ุงูุชูุถูุญูุฉ ุงูููุฌุฒุฉ ูุนูุงูุงุช ุงูุชุตููู ูุงูุชูุงุนู.  ุฑูุฒ ุนูู ุฑูุงูุฉ ุงููุตุต ูุงูุฃุตุงูุฉ ูุงูุชูุงุตู ูุน ุงูุฌูุงููุฑ ูููุตูู ูุงููุดุงุฑูุฉ ุจุดูู ุฃูุถู.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ููุงูุดุฉ ุฏูุฑ ุงูุชุฎุทูุท ุงูุงุณุชุฑุงุชูุฌู ูู ูุญุชูู ูุณุงุฆู ุงูุชูุงุตู ุงูุงุฌุชูุงุนูุ ุจูุง ูู ุฐูู ุฃุฏูุงุช ุงูุชุฎุทูุท ูุงุณุชูุฏุงู ุงูุฌูููุฑ ูุงุฎุชูุงุฑ ุงูููุตุฉ ูุงูุงุชุณุงู ุงูููุถูุนู.  ูู ุจุชุณููุท ุงูุถูุก ุนูู ุชูุงูู ุงููุญุชูู ูุน ุฃูุฏุงู ุงูุนูู ูุงุชุณุงู ุงูุนูุงูุฉ ุงูุชุฌุงุฑูุฉ ูุงุณุชุฎุฏุงู ุงูุชุญูููุงุช ููุชุญุณูู.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
        { id: 3, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูุซ', content: 'ุงุณุชูุดู ุฅุณุชุฑุงุชูุฌูุงุช ุชุถุฎูู ููุดูุฑุงุช ูุณุงุฆู ุงูุชูุงุตู ุงูุงุฌุชูุงุนูุ ุจูุง ูู ุฐูู ุงูุนูุงุตุฑ ุงููุฑุฆูุฉ ุงููุนุงูุฉ ูุงูุชุณููุงุช ุงูุชูุถูุญูุฉ ุงูููุฌุฒุฉ ูุนูุงูุงุช ุงูุชุตููู ูุงูุชูุงุนู.  ุฑูุฒ ุนูู ุฑูุงูุฉ ุงููุตุต ูุงูุฃุตุงูุฉ ูุงูุชูุงุตู ูุน ุงูุฌูุงููุฑ ูููุตูู ูุงููุดุงุฑูุฉ ุจุดูู ุฃูุถู.  ุงุจุฏุฃ ุจุงููุงุฆูุฉุ ููุง ุชูุชุฌ ูุตููุง ููุจุฏุงูุฉ ูุงูููุงูุฉ.' },
      ]
    },
    {
      id: 8, name: 'ุงูุชุฑููู ๐', templates: [
        { id: 1, title: 'ุงูุงูุชุฑุงุญ ุงูุฃูู', content: 'ุณูู ููุนุจ ูุนุจุฉ ุงููููุงุช ูุนูุง.  ุงููุนุจุฉ ุจุณูุทุฉ ูููููุง ููุชุนุฉุ ุญูุซ ูุชูุงูุจ ุงููุงุนุจูู ูู ูุทู ุงููููุงุช ุงูุชู ุชุจุฏุฃ ุจุงูุญุฑู ุงูุฐู ุงูุชูุช ุจู ุงููููุฉ ุงูุณุงุจูุฉ.  ูููุง ููู ุงูููุงุนุฏ ุงูุฃุณุงุณูุฉ: ุนููู ุฃู ุชุจุฏุฃ ุจููู ุฃู ูููุฉ.  ุซู ูุฌุจ ุฃู ุฃููู ูููุฉ ุชุจุฏุฃ ุจุงูุญุฑู ุงูุฃุฎูุฑ ูู ุงููููุฉ ุงูุณุงุจูุฉ.  ูุง ูุฌูุฒ ุชูุฑุงุฑ ุงููููุงุช ูู ููุณ ุงููุนุจุฉุ ููุง ููุณูุญ ุจุงุณุชุฎุฏุงู ุงูุฃุณูุงุก ุงูุตุญูุญุฉ (ุฃุณูุงุก ุฃุดุฎุงุต ุฃู ุฃูุงูู ุฃู ุฃุดูุงุก ูุญุฏุฏุฉ).  ุชุณุชูุฑ ุงููุนุจุฉ ุญุชู ูุง ูุชููู ุฃุญุฏูุง ูู ุงูุชูููุฑ ูู ูููุฉ ุตุญูุญุฉ ุฃู ูุชู ุชูุฑุงุฑ ุงููููุฉ.  ุฃููุงู ูู ุจูุตู ููุงุนุฏ ุงููุนุจุฉ ูุงุจุฏุฃ ุงููุนุจุฉุ ููุง ุชูุชุจ ุฃู ุชูุณูุฑุงุช.' },
        { id: 2, title: 'ุงูุงูุชุฑุงุญ ุงูุซุงูู', content: 'ุณูู ููุนุจ ูุนุจุฉ ุงููููุงุช ูุนูุง.  ุงููุนุจุฉ ุจุณูุทุฉ ูููููุง ููุชุนุฉุ ุญูุซ ูุชูุงูุจ ุงููุงุนุจูู ูู ูุทู ุงููููุงุช ุงูุชู ุชุจุฏุฃ ุจุงูุญุฑู ุงูุฐู ุงูุชูุช ุจู ุงููููุฉ ุงูุณุงุจูุฉ.  ูููุง ููู ุงูููุงุนุฏ ุงูุฃุณุงุณูุฉ: ุนููู ุฃู ุชุจุฏุฃ ุจููู ุฃู ูููุฉ.  ุซู ูุฌุจ ุฃู ุฃููู ูููุฉ ุชุจุฏุฃ ุจุงูุญุฑู ุงูุฃุฎูุฑ ูู ุงููููุฉ ุงูุณุงุจูุฉ.  ูุง ูุฌูุฒ ุชูุฑุงุฑ ุงููููุงุช ูู ููุณ ุงููุนุจุฉุ ููุง ููุณูุญ ุจุงุณุชุฎุฏุงู ุงูุฃุณูุงุก ุงูุตุญูุญุฉ (ุฃุณูุงุก ุฃุดุฎุงุต ุฃู ุฃูุงูู ุฃู ุฃุดูุงุก ูุญุฏุฏุฉ).  ุชุณุชูุฑ ุงููุนุจุฉ ุญุชู ูุง ูุชููู ุฃุญุฏูุง ูู ุงูุชูููุฑ ูู ูููุฉ ุตุญูุญุฉ ุฃู ูุชู ุชูุฑุงุฑ ุงููููุฉ.  ุฃููุงู ูู ุจูุตู ููุงุนุฏ ุงููุนุจุฉ ูุงุจุฏุฃ ุงููุนุจุฉุ ููุง ุชูุชุจ ุฃู ุชูุณูุฑุงุช.' },
      ]
    },
    // Add more options as needed
  ];

  const handleOptionSelect = (optionId) => {
    setSelectedOption(optionId);

    if (scrollViewRef2.current) {
      scrollViewRef2.current.scrollTo({ x: 0, animated: false });
    }
  };


  const customButton = (
    <Button
      title="Custom Button"
      onPress={async () => {
        try {

          const id = 'placementid';
          const locale = 'en';
      
          const paywall = await adapty.getPaywall(id, locale);
          // the requested paywall
          const view = await createPaywallView(paywall);
      
          view.registerEventHandlers(); // handle close press, etc
      
          try {
            await view.present();
          } catch (error) {
            // handle the error
          }
          const unsubscribe = view.registerEventHandlers({
            
            onPurchaseCompleted(profile) {
                setisNeedSubscription(false);
                setModalVisible(false);
                setInputEnabled(true);
      
              return true;
            },
      
          });
        
      
      
        } catch (error) {
          // handle the error
        }


      }}
    />
  );

  const buttonpaywall = async ()=>{
    try {
      const id = 'placementid';
      const locale = 'en';
  
      const paywall = await adapty.getPaywall(id, locale);
            console.log('zzzzzzzzzzzz')

      // the requested paywall
      const view = await createPaywallView(paywall);

      view.registerEventHandlers(); // handle close press, etc
  
      try {
        await view.present();
      } catch (error) {
        // handle the error
      }
      const unsubscribe = view.registerEventHandlers({
        
        onPurchaseCompleted(profile) {
            setisNeedSubscription(false);
            setModalVisible(false);
            setInputEnabled(true);
  
          return true;
        },
  
      });
    
  
  
    } catch (error) {
      // handle the error
    }
  }


  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : "padding"}
      style={{ flex: 1 }}
    >

      <LinearGradient
        colors={['#ff6ec4', '#7873f5']}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }} style={{ flex: 1, paddingTop: StatusBar.currentHeight + 20, paddingHorizontal: 10, paddingBottom: 35 }}>


        <ScrollView style={{ flex: 1 }} ref={scrollViewRef} onContentSizeChange={() =>
          scrollViewRef.current.scrollToEnd({ animated: true })
        }>


          <View style={styles.bubblewrapperbot}>


            <ImageBackground resizeMode="cover" source={require('../assets/newlogo.jpg')} style={{ backgroundColor: 'white', width: 40, height: 40, borderRadius: 7, marginRight: 10, overflow: 'hidden' }}>

            </ImageBackground>

            <View style={styles.botMessageBubble}>

              <Text selectable style={styles.botMessage}>{'ุฃููุง ู ุณููุงุ ุฃูุง ูุณุงุนุฏู ุงูุดุฎุตูุ ููููู ุณุคุงู ุนู ุฃู ูุฌุงู ูู ุงูุนุงูู ู ุณุฃููุฑ ูู ุฃูุถู ุฅุฌุงุจุฉ ููููุฉุ ููููู ุฅุฎุชูุงุฑ ุฃุญุฏ ุงูุฅุฎุชูุงุฑุงุช ูู ุงูุฃุณูู ุฃู ุณุคุงูู ูุจุงุดุฑุฉ ๐'}</Text>



              {isNeedSubscription && <TouchableOpacity onPress={buttonpaywall} style={{ backgroundColor: '#FF8080', padding: 16, borderRadius: 10, marginTop: 30, borderWidth: 1, borderBottomWidth: 5, borderColor: '#db6969' }}>
                <Text style={{ color: 'white', fontSize: 20, fontWeight: 'bold' }}>{'ุฐูุงุก ุงุตุทูุงุนู ูู ุฌูุจู ุจุฃุฑุฎุต ุซูู ๐'}</Text>
              </TouchableOpacity>}



            </View>
          </View>

          {messages.map((msg, index) => (

            <View key={index} style={msg.isUserMessage ? styles.bubblewrapper : styles.bubblewrapperbot}>

              {!msg.isUserMessage ? (
                <ImageBackground resizeMode="cover" source={require('../assets/newlogo.jpg')} style={{ backgroundColor: 'white', width: 40, height: 40, borderRadius: 7, marginRight: 10, overflow: 'hidden' }}>

                </ImageBackground>
              ) : null}
              <View style={msg.isUserMessage ? styles.userMessageBubble : styles.botMessageBubble}>
                <Text selectable style={msg.isUserMessage ? styles.userMessage : styles.botMessage}>{msg.text}</Text>

                {!msg.isUserMessage && <TouchableOpacity activeOpacity={0.5} onPress={async () => {await Clipboard.setStringAsync(msg.text);}}>
                  <Text style={{ color: '#040404', backgroundColor: '#58EF84', fontSize: 16, textAlign: 'center', padding: 5, borderRadius: 10, fontWeight: 'bold', borderWidth: 1, borderBottomWidth: 4, borderColor: '#43bf67', marginTop: 10 }}>ูุณุฎ ุงููุต</Text>
                </TouchableOpacity>}

                {isNeedSubscription && <TouchableOpacity onPress={buttonpaywall} style={{ backgroundColor: '#FF8080', padding: 16, borderRadius: 10, marginTop: 30, borderWidth: 1, borderBottomWidth: 5, borderColor: '#db6969' }}>
                  <Text style={{ color: 'white', fontSize: 20, fontWeight: 'bold' }}>{'ุฐูุงุก ุงุตุทูุงุนู ูู ุฌูุจู ุจุฃุฑุฎุต ุซูู ๐'}</Text>
                </TouchableOpacity>}
              </View>
            </View>

          ))}

        </ScrollView>

        <SubscribePopup modalVisible={modalVisible} setModalVisible={setModalVisible}  customButton={customButton} />


        {!isSentMsg && <View style={{ height: 100 }}>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            {options.map(option => (
              <TouchableOpacity
                activeOpacity={0.9}
                key={option.id}
                style={[
                  styles.option,
                  selectedOption === option.id ? styles.selectedOption : null
                ]}
                onPress={() => { handleOptionSelect(option.id); setIsInputFocused(false); }}
              >
                <Text style={[
                  styles.optionText,
                  selectedOption === option.id ? styles.selectedOptionText : null

                ]}>{option.name}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>}


        {!isInputFocused && <View style={{ height: 220 }}>

          <ScrollView
            ref={scrollViewRef2}
            showsHorizontalScrollIndicator={false}
            horizontal
            style={{
              flexDirection: 'row',
              padding: 10,
              // Adjust the height as needed
            }}
          >
            {options.find(option => option.id === selectedOption)?.templates.map(template => (



              <TouchableOpacity
                activeOpacity={0.9}

                key={template.id}
                onPress={() => {
                  sendMessage2(template.content)



                }}// Add onPress handler
                style={{
                  backgroundColor: '#FFE6E6',
                  borderRadius: 10,
                  borderWidth: 4,
                  borderColor: '#deb4b4',
                  marginRight: 10,
                  padding: 10,
                  width: 220,
                  height: 200,
                  borderBottomWidth: 5,
                  overflow: 'hidden',
                }}
              >
                <Text
                  style={{
                    fontSize: 18,
                    fontWeight: 'bold',
                    marginBottom: 5,
                  }}
                >
                  {template.title}
                </Text>
                <Text style={{ fontSize: 16 }}>{template.content}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>

        </View>}






        <View style={{ flexDirection: 'row', alignItems: 'center', padding: 10, }}>

          <TextInput
            style={{ flex: 1, marginRight: 10, backgroundColor: '#A87C7C', height: 65, paddingRight: 20, borderRadius: 10, color: 'white', fontSize: 18, textAlign: 'right', borderWidth: 2, borderColor: '#825f5f' }}
            value={userInput}
            onChangeText={setUserInput}
            editable={inputEnabled}

            placeholder="ุฃูุชุจ ุดูุฆุง..."
          />





          <TouchableOpacity onPress={sendMessage} style={{ backgroundColor: '#F0DBAF', padding: 16, borderRadius: 10, borderWidth: 2, borderColor: '#c9b68d' }}>
            <Text style={{ color: '#B06161', fontSize: 20, fontWeight: 'bold' }}>{'ุฃุฑุณู'}</Text>
          </TouchableOpacity>

        </View>


      </LinearGradient>


    </KeyboardAvoidingView>
  );
};


const styles = StyleSheet.create({
  optionText: {
    color: 'black',
    fontSize: 20,
    fontWeight: 'bold'
  },
  selectedOptionText: {
    color: 'white',
  },

  option: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    marginRight: 10,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: 'orange',
    backgroundColor: '#EE9322',
    borderBottomWidth: 5
  },
  selectedOption: {
    backgroundColor: 'orange',
    borderColor: '#EE9322'
  },

  userMessage: {
    fontSize: 20,
    textAlign: 'right', // Align user messages to the right
    color: 'white',
  },
  botMessage: {
    fontSize: 20, // Adjust the font size as needed
    textAlign: 'left', // Align bot messages to the left
    color: '#3E3232',
    textAlign: 'right' // Adjust color if needed
  },
  bubblewrapper: {
    width: '100%',
    alignItems: 'flex-end',
    marginBottom: 15,
  },
  bubblewrapperbot: {
    width: '100%',
    marginBottom: 15,
    flexDirection: 'row',
    alignItems: 'center'

  },
  userMessageBubble: {
    backgroundColor: '#A87C7C',
    padding: 10,
    width: 300,
    borderRadius: 10,
    borderBottomWidth: 5,
    borderColor: '#916a6a',
    borderWidth: 1
  },
  botMessageBubble: {
    backgroundColor: '#FFE6E6',
    padding: 10,
    width: 300,
    borderRadius: 10,
    borderBottomWidth: 5,
    borderColor: '#d6abab',
    borderWidth: 1


  },
});







export default ChatRoom;
